package net.crandor;

final class ObjectDefinition extends NodeSub {

    private static final int[] BUILT_OBJECTS = {
            2715,
            13126,
            13127,
            13128,
            13129,
            13130,
            13131,
            13132,
            13133,
            13134,
            13135,
            13136,
            13137,
            13138,
            13139,
            13140,
            13142,
            13143,
            13144,
            13145,
            13147,
            13148,
            13149,
            13150,
            13151,
            13152,
            13153,
            13154,
            13155,
            13156,
            13157,
            13158,
            13159,
            13160,
            13161,
            13162,
            13163,
            13164,
            13165,
            13166,
            13167,
            13168,
            13169,
            13170,
            13171,
            13172,
            13173,
            13174,
            13175,
            13176,
            13177,
            13178,
            13179,
            13180,
            13181,
            13182,
            13183,
            13184,
            13185,
            13186,
            13187,
            13188,
            13189,
            13190,
            13191,
            13192,
            13193,
            13194,
            13195,
            13196,
            13197,
            13198,
            13199,
            13200,
            13201,
            13202,
            13203,
            13204,
            13205,
            13206,
            13207,
            13208,
            13209,
            13210,
            13211,
            13212,
            13213,
            13214,
            13215,
            13216,
            13217,
            13218,
            13219,
            13220,
            13221,
            13222,
            13223,
            13224,
            13225,
            13226,
            13227,
            13228,
            13229,
            13230,
            13231,
            13232,
            13233,
            13234,
            13235,
            13236,
            13237,
            13238,
            13239,
            13240,
            13241,
            13242,
            13243,
            13244,
            13245,
            13246,
            13247,
            13248,
            13249,
            13250,
            13251,
            13252,
            13253,
            13254,
            13255,
            13256,
            13257,
            13258,
            13259,
            13260,
            13261,
            13262,
            13263,
            13264,
            13265,
            13266,
            13267,
            13268,
            13269,
            13270,
            13271,
            13272,
            13273,
            13274,
            13275,
            13276,
            13277,
            13278,
            13279,
            13280,
            13281,
            13282,
            13283,
            13285,
            13287,
            13289,
            13291,
            13293,
            13294,
            13295,
            13296,
            13297,
            13298,
            13299,
            13300,
            13301,
            13302,
            13303,
            13304,
            13305,
            13306,
            13307,
            13308,
            13309,
            13310,
            13311,
            13312,
            13313,
            13314,
            13316,
            13317,
            13319,
            13320,
            13322,
            13323,
            13325,
            13326,
            13328,
            13329,
            13330,
            13331,
            13332,
            13333,
            13334,
            13335,
            13336,
            13337,
            13341,
            13342,
            13343,
            13344,
            13345,
            13346,
            13347,
            13348,
            13349,
            13356,
            13357,
            13358,
            13359,
            13360,
            13361,
            13362,
            13363,
            13364,
            13365,
            13366,
            13367,
            13368,
            13369,
            13370,
            13372,
            13373,
            13374,
            13375,
            13376,
            13377,
            13378,
            13379,
            13380,
            13381,
            13382,
            13383,
            13384,
            13385,
            13386,
            13387,
            13388,
            13389,
            13390,
            13392,
            13393,
            13394,
            13395,
            13396,
            13397,
            13398,
            13399,
            13400,
            13401,
            13402,
            13403,
            13404,
            13405,
            13406,
            13407,
            13408,
            13409,
            13411,
            13412,
            13413,
            13414,
            13415,
            13416,
            13417,
            13418,
            13419,
            13420,
            13421,
            13422,
            13423,
            13424,
            13425,
            13426,
            13427,
            13428,
            13429,
            13430,
            13431,
            13432,
            13433,
            13434,
            13435,
            13436,
            13437,
            13438,
            13439,
            13440,
            13441,
            13442,
            13443,
            13444,
            13445,
            13446,
            13447,
            13448,
            13449,
            13450,
            13451,
            13452,
            13453,
            13454,
            13455,
            13456,
            13457,
            13458,
            13459,
            13460,
            13461,
            13462,
            13463,
            13464,
            13465,
            13466,
            13467,
            13468,
            13469,
            13470,
            13471,
            13472,
            13473,
            13474,
            13475,
            13476,
            13477,
            13478,
            13479,
            13480,
            13481,
            13482,
            13483,
            13484,
            13485,
            13486,
            13487,
            13488,
            13489,
            13490,
            13491,
            13492,
            13493,
            13495,
            13496,
            13497,
            13498,
            13499,
            13500,
            13501,
            13502,
            13503,
            13504,
            13505,
            13506,
            13507,
            13508,
            13509,
            13510,
            13511,
            13512,
            13513,
            13514,
            13515,
            13516,
            13517,
            13518,
            13519,
            13520,
            13521,
            13522,
            13523,
            13524,
            13525,
            13526,
            13527,
            13528,
            13529,
            13531,
            13533,
            13534,
            13536,
            13537,
            13539,
            13541,
            13542,
            13544,
            13545,
            13546,
            13547,
            13548,
            13549,
            13550,
            13551,
            13552,
            13553,
            13554,
            13555,
            13556,
            13557,
            13558,
            13559,
            13560,
            13561,
            13562,
            13563,
            13564,
            13565,
            13566,
            13567,
            13568,
            13569,
            13570,
            13571,
            13572,
            13573,
            13574,
            13575,
            13576,
            13577,
            13578,
            13579,
            13580,
            13581,
            13582,
            13583,
            13584,
            13585,
            13586,
            13587,
            13588,
            13589,
            13590,
            13591,
            13592,
            13593,
            13594,
            13595,
            13596,
            13597,
            13598,
            13599,
            13600,
            13601,
            13602,
            13603,
            13604,
            13605,
            13606,
            13607,
            13608,
            13609,
            13611,
            13613,
            13615,
            13616,
            13617,
            13618,
            13619,
            13620,
            13621,
            13622,
            13623,
            13624,
            13625,
            13626,
            13627,
            13628,
            13629,
            13630,
            13631,
            13632,
            13633,
            13634,
            13635,
            13636,
            13637,
            13638,
            13639,
            13640,
            13641,
            13642,
            13643,
            13644,
            13645,
            13646,
            13647,
            13648,
            13649,
            13650,
            13651,
            13652,
            13653,
            13654,
            13655,
            13656,
            13657,
            13658,
            13659,
            13660,
            13661,
            13662,
            13663,
            13664,
            13665,
            13666,
            13667,
            13668,
            13669,
            13670,
            13671,
            13672,
            13673,
            13674,
            13675,
            13676,
            13677,
            13678,
            13679,
            13680,
            13681,
            13682,
            13683,
            13684,
            13685,
            13686,
            13687,
            13688,
            13689,
            13690,
            13691,
            13692,
            13693,
            13694,
            13695,
            13696,
            13699,
            13700,
            13701,
            13702,
            13703,
            13704,
            13705,
            13706,
            13707,
            13708,
            13709,
            13710,
            13711,
            13712,
            13713,
            13714,
            13715,
            13716,
            13717,
            13718,
            13734,
            13735,
            13736,
            13737,
            13738,
            13739,
            13740,
            13741,
            13742,
            13743,
            13744,
            13745,
            13746,
            13747,
            13748,
            13749,
            13750,
            13751,
            13752,
            13753,
            13754,
            13755,
            13756,
            13757,
            13758,
            13759,
            13760,
            13761,
            13762,
            13763,
            13764,
            13765,
            13766,
            13767,
            13768,
            13769,
            13770,
            13771,
            13772,
            13773,
            13774,
            13775,
            13776,
            13777,
            13778,
            13779,
            13780,
            13781,
            13782,
            13783,
            13784,
            13785,
            13786,
            13787,
            13788,
            13789,
            13790,
            13791,
            13792,
            13793,
            13794,
            13795,
            13796,
            13797,
            13798,
            13799,
            13800,
            13801,
            13802,
            13803,
            13804,
            13805,
            13806,
            13807,
            13808,
            13809,
            13810,
            13811,
            13812,
            13813,
            13814,
            13815,
            13816,
            13817,
            13818,
            13819,
            13820,
            13821,
            13822,
            13823,
            13824,
            13825,
            13826,
            13827,
            13828,
            13829,
            18766,
            18767,
            18768,
            18769,
            18770,
            18771,
            18772,
            18774,
            18776,
            18778,
            18780,
            18782,
            18784,
            18786,
            18788,
            18790,
            18792,
            18794,
            18796,
            18798,
            18800,
            18802,
            18804,
            18806,
            18808,
            20322
    };
    private static final int[] HOTSPOT_OBJECTS = {
            13728,
            13729,
            13730,
            13731,
            13732,
            13733,
            15256,
            15257,
            15258,
            15259,
            15260,
            15261,
            15262,
            15263,
            15264,
            15265,
            15266,
            15267,
            15268,
            15269,
            15270,
            15271,
            15272,
            15273,
            15274,
            15275,
            15276,
            15277,
            15278,
            15279,
            15280,
            15281,
            15282,
            15283,
            15284,
            15285,
            15286,
            15287,
            15288,
            15289,
            15290,
            15291,
            15292,
            15293,
            15294,
            15295,
            15296,
            15297,
            15298,
            15299,
            15300,
            15301,
            15302,
            15303,
            15304,
            15305,
            15306,
            15307,
            15308,
            15309,
            15310,
            15311,
            15312,
            15313,
            15314,
            15315,
            15316,
            15317,
            15318,
            15319,
            15320,
            15321,
            15322,
            15323,
            15324,
            15325,
            15326,
            15327,
            15328,
            15329,
            15330,
            15331,
            15332,
            15333,
            15334,
            15335,
            15336,
            15337,
            15338,
            15339,
            15340,
            15341,
            15342,
            15343,
            15344,
            15345,
            15346,
            15347,
            15348,
            15349,
            15350,
            15351,
            15352,
            15353,
            15354,
            15355,
            15356,
            15357,
            15358,
            15359,
            15360,
            15361,
            15362,
            15363,
            15364,
            15365,
            15366,
            15367,
            15368,
            15377,
            15378,
            15379,
            15380,
            15381,
            15382,
            15383,
            15384,
            15385,
            15386,
            15387,
            15388,
            15389,
            15390,
            15391,
            15392,
            15393,
            15394,
            15395,
            15396,
            15397,
            15398,
            15399,
            15400,
            15401,
            15402,
            15403,
            15404,
            15405,
            15406,
            15407,
            15408,
            15409,
            15410,
            15411,
            15412,
            15413,
            15414,
            15415,
            15416,
            15417,
            15418,
            15419,
            15420,
            15421,
            15422,
            15423,
            15424,
            15425,
            15426,
            15427,
            15428,
            15429,
            15430,
            15431,
            15432,
            15433,
            15434,
            15435,
            15436,
            15437,
            15438,
            15439,
            15441,
            15443,
            15444,
            15445,
            15446,
            15447,
            15448,
            15450,
            18810,
            18811,
            18812,
            18813,
            18814,
            18815,
            34138
    };
    private static final Model[] modelParts = new Model[4];
    static int totalObjects;
    static boolean lowMem;
    static MRUNodes modelCache2 = new MRUNodes(30);
    static MRUNodes modelCache = new MRUNodes(500);
    static MRUNodes recentUse = new MRUNodes(100);
    private static Stream stream;
    private static Stream stream2;
    private static int[] streamIndices;
    private static int[] streamIndices2;
    private static Stream streamOsrs;
    private static int[] streamOsrsIndices;
    public int supportItems;
    boolean groundObstructive;
    String name;
    int width;
    int mapFunctionID;
    int varpId;
    int myId;
    boolean impenetrable;
    int mapSceneID;
    int alternativeIDS[];
    int height;
    boolean adjustToTerrain;
    boolean occludes;
    boolean isUnwalkable;
    int surroundings;
    int varBitId;
    int decorDisplacement;
    byte description[];
    int hasActions;
    boolean renderStill;
    boolean castsShadow;
    int animationId;
    String actions[];
    private int ambient;
    private int offsetX;
    private int modelSizeY;
    private int contrast;
    private int offsetH;
    private short[] originalModelColors;
    private int modelSizeX;
    private boolean inverted;
    private boolean ethereal;
    private boolean nonFlatShading;
    private int modelSizeH;
    private int[] objectModelIDS;
    private int[] objectModelType;
    private int offsetY;
    private short[] modifiedModelColors;
    private short[] modifiedTextureFace;
    private short[] originalTextureFace;

    private ObjectDefinition() {
        myId = -1;

    }

    public static boolean useOsrsIndex() {
        switch (Client.getRegionId()) {
            case 14682: // kraken
            case 9007: // zulrah
            case 9008:
            case 4883: // cerberous
                return true;
        }

        return false;
    }

    /**
     * todo get rid of this
     *
     * @param id
     * @return
     */
    private static boolean useNewDefinition(int id) {
        switch (id) {
            // blood alter
            case 1166:
            case 1195:
            case 1196:
            case 1246:
            case 1247:
            case 1251:
            case 1252:
            case 1278:
            case 1391:
            case 16436:
            case 38204:
            case 38213:
            case 38214:
            case 38215:
            case 38216:
            case 38218:
            case 38219:
            case 38379:
            case 38381:
            case 2098:
            case 2099:
            case 5989:
            case 6000:
            case 6002:
            case 6007:
            case 6008:
            case 34976:
            case 34977:
            case 3749:
            case 3750:
            case 3751:
            case 3753:
            case 3754:
            case 3755:
            case 2477:
            case 16389:
            case 16424:
            case 30338:
            case 30369:
            case 30370:
            case 30624:
            case 30763:
            case 30764:
            case 30765:
            case 30766:
            case 30767:
            case 30768:
            case 30769:
            case 30770:
            case 30771:
            case 30772:
            case 30773:
            case 30774:
            case 30775:
            case 30776:
            case 30777:
            case 30778:
            case 30779:
            case 30780:
            case 30781:
            case 30782:
            case 30783:
            case 30784:
            case 30785:
            case 30786:
            case 30787:
            case 30788:
            case 30789:
            case 30794:
            case 6788:
            case 7324:
            case 7325:
            case 7326:
            case 7327:
            case 7328:
            case 7329:
            case 7330:
            case 7331:
            case 7332:
            case 7333:
            case 7334:
            case 7335:
            case 7336:
            case 7337:
            case 7338:
            case 7339:
            case 7340:
            case 7341:
            case 7342:
            case 7346:
            case 7347:
            case 7348:
            case 7349:
            case 7350:
            case 7352:
            case 7353:
            case 7354:
            case 7356:
            case 7358:
            case 7370:
            case 7371:
            case 7372:
            case 7376:
            case 7385:
            case 7386:
            case 7387:
            case 38406:
            case 38408:
            case 38409:
            case 38410:
            case 38412:
            case 38413:
            case 38414:
            case 38415:
            case 38416:
            case 6004:
                return true;

            // rev exit
            case 18341:
                return true;

            /**
             * dung maps
             */
            case 49257:
            case 49272:
            case 49273:
            case 49462:
            case 49465:
            case 49504:
            case 49507:
            case 49609:
            case 49615:
            case 49616:
            case 49617:
            case 49618:
            case 49623:
            case 49624:
            case 49702:
            case 49765:
            case 49922:
            case 50342:
            case 50346:
            case 50569:
            case 50574:
            case 50575:
            case 50576:
            case 51100:
            case 51101:
            case 51149:
            case 51157:
            case 51158:
            case 51159:
            case 51163:
            case 51164:
            case 51171:
            case 51172:
            case 51173:
            case 51174:
            case 51175:
            case 51177:
            case 51178:
            case 51179:
            case 51180:
            case 51181:
            case 51182:
            case 51183:
            case 51184:
            case 51186:
            case 51187:
            case 51188:
            case 51190:
            case 51191:
            case 51192:
            case 51193:
            case 51195:
            case 51196:
            case 51198:
            case 51200:
            case 51207:
            case 51213:
            case 51214:
            case 51227:
            case 51228:
            case 51230:
            case 51231:
            case 51232:
            case 51233:
            case 51280:
            case 51313:
            case 51315:
            case 51316:
            case 51317:
            case 51318:
            case 51320:
            case 51321:
            case 51322:
            case 51323:
            case 51325:
            case 51326:
            case 51327:
            case 51358:
            case 51360:
            case 51362:
            case 51363:
            case 51364:
            case 51365:
            case 51367:
            case 51368:
            case 51370:
            case 51371:
            case 51396:
            case 51401:
            case 51406:
            case 51426:
            case 51427:
            case 51435:
            case 51440:
            case 51445:
            case 51450:
            case 51473:
            case 51475:
            case 51476:
            case 51478:
            case 51483:
            case 51484:
            case 51485:
            case 51498:
            case 51514:
            case 51516:
            case 51518:
            case 51519:
            case 51539:
            case 51540:
            case 51542:
            case 51543:
            case 52206:
            case 52222:
            case 52242:
            case 52263:

                /**
                 * kuradel dungeon
                 */
            case 2745:
            case 25297:
            case 25332:
            case 25333:
            case 25334:
            case 25335:
            case 25359:
            case 25360:
            case 25361:
            case 39440:
            case 39467:
            case 47232:
            case 4451:
            case 16449:
            case 25296:
            case 25301:
            case 25302:
            case 25303:
            case 25311:
            case 25314:
            case 25318:
            case 25321:
            case 25326:
            case 25327:
            case 25328:
            case 25329:
            case 25330:
            case 25342:
            case 25343:
            case 25345:
            case 25352:
            case 25354:
            case 25356:
            case 25357:
            case 25363:
            case 25364:
            case 29958:
            case 29992:
            case 37024:
            case 37090:
            case 39450:
            case 39451:
            case 47223:
            case 47224:
            case 47225:
            case 47226:
            case 47227:
            case 47228:
            case 47229:
            case 47230:
            case 47231:
            case 47233:
            case 47234:
            case 47235:
            case 47236:
            case 47237:
            case 52838:
            case 52839:
            case 25351:

                /**
                 * smoke dungeon
                 */
                //case 32766:

                /**
                 * jadinko
                 */
            case 12284:
            case 12287:
            case 12289:
            case 12290:
            case 12291:
            case 12320:
            case 12321:
            case 12327:
            case 12333:
            case 12413:
            case 12414:
            case 12415:
            case 12421:
            case 12423:
            case 12424:
            case 12426:
            case 12427:
            case 12452:
            case 12456:
            case 12458:
            case 12484:
            case 12485:
            case 12496:
            case 12504:
            case 12525:
            case 12530:
            case 12541:
            case 12569:
            case 12572:
            case 12588:
            case 12589:
            case 12603:
            case 12604:
            case 12605:
            case 12638:
            case 12639:
            case 12640:
            case 12642:
            case 12643:
            case 12644:
            case 12645:
            case 12646:
            case 12647:
            case 12648:
            case 12650:
            case 44097:
            case 11124:
            case 11129:
            case 11130:
            case 11132:
            case 11133:
            case 11137:
            case 11142:
            case 11143:
            case 11144:
            case 11146:
            case 11147:
            case 11149:
            case 11155:
            case 11376:
            case 11377:

            case 26408:
            case 57225:
            case 39221:
            case 39222:
            case 39223:
            case 40717:
            case 40736:
            case 40741:
            case 40742:
            case 40744:
            case 40745:
            case 40746:
            case 40748:
            case 40750:
            case 40782:
            case 40783:
            case 40784:
            case 40785:
            case 40786:
            case 40801:
            case 40803:
            case 40804:
            case 40805:
            case 40806:
            case 41069:
            case 41276:
            case 41378:
            case 32767:
            case 32768:
            case 33823:
            case 33824:
            case 33825:
            case 33826:
            case 33827:
            case 33828:
            case 33829:
            case 33830:
            case 33831:
            case 33832:
            case 33833:
            case 33834:
            case 33835:
            case 33836:
            case 33837:
            case 33838:
            case 34262:
            case 34268:
            case 34269:
            case 34281:
            case 34282:
            case 34293:
            case 34295:
            case 34296:
            case 34327:
            case 34328:
            case 34329:
            case 34330:
            case 34331:
            case 34342:
            case 34343:
            case 34344:
            case 34345:
            case 34346:
            case 34348:
            case 34349:
            case 34350:
            case 34364:
            case 34365:
            case 34826:
            case 34827:
            case 34841:
            case 34842:
            case 34843:
            case 34923:
            case 14390:
            case 14391:
            case 14392:
            case 14393:
            case 14394:
            case 18303:
            case 18445:
            case 18446:
            case 18447:
            case 18448:
            case 18452:
            case 18456:
            case 18457:
            case 18458:
            case 18459:
            case 20490:
            case 20504:
            case 20525:
            case 20529:
            case 20533:
            case 20545:
            case 20549:
            case 20576:
            case 20577:
            case 20578:
            case 20579:
            case 20583:
            case 20584:
            case 20596:
            case 20597:
            case 20598:
            case 57105:
            case 57558:
            case 84:
            case 18342:
            case 18343:
            case 18344:
            case 18345:
            case 18346:
            case 18361:
            case 20468:
            case 20500:
            case 20530:
            case 20532:
            case 25636:
            case 57557:
            case 57560:
            case 57570:
            case 10370:
            case 53365:
            case 53366:
            case 53368:
            case 53378:
            case 53379:
            case 32157:
                return true;
        }
        return false;
    }

    static ObjectDefinition forID(int objectId) {
        ObjectDefinition objectDef = (ObjectDefinition) recentUse.get(objectId);
        if (objectDef != null) {
        	return objectDef;
        }

        try {
            if (useOsrsIndex()) {
                streamOsrs.currentOffset = streamOsrsIndices[objectId];
            } else if (useNewDefinition(objectId) || objectId > totalObjects) {
                stream2.currentOffset = streamIndices2[objectId];
            } else {
                stream.currentOffset = streamIndices[objectId];
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        objectDef = new ObjectDefinition();
        objectDef.myId = objectId;
        objectDef.setDefaults();
        try {
            if (useOsrsIndex()) {
                System.out.println("object " + objectId);

                objectDef.readOsrsValues(streamOsrs);
            } else if (useNewDefinition(objectId) || objectId > totalObjects) {
                objectDef.readValues(stream2, objectId, true);
            } else {
                objectDef.readValues(stream, objectId, false);
            }
            objectDef.postDecode();
        } catch (Exception e) {
            System.out.println("" + objectId);
            e.printStackTrace();
        }

        // farming objects
        switch (objectId) {


            case 4116:
                objectDef.name = "Wilderness Chest";
                break;


        	case 35468:
          	case 35467:
        	case 35466:
        	case 35465:
        	case 35464:
         	case 35463:
        	case 35462:
        	case 35461:
           	case 35460:
        	case 35459:
        		objectDef.offsetH -= 4;
        		break;

            case 25200: // beacons used for gnome glider down
            case 28847:
            case 38266:
                objectDef.actions = new String[5];
                objectDef.actions[0] = "Search";
                break;

            case 8388:
                objectDef.varBitId = 700;
                break;
            case 8389:
                objectDef.varBitId = 701;
                break;
            case 8390:
                objectDef.varBitId = 702;
                break;
            case 8391:
                objectDef.varBitId = 703;
                break;
            case 7847:
                objectDef.varBitId = 728;
                break;
            case 8150:
                objectDef.varBitId = 780;
                break;
            case 8151:
                objectDef.varBitId = 781;
                break;
            case 8152:
                objectDef.varBitId = 782;
                break;
            case 8153:
                objectDef.varBitId = 783;
                break;
            case 8552:
                objectDef.varBitId = 710;
                break;
            case 8553:
                objectDef.varBitId = 711;
                break;
            case 8550:
                objectDef.varBitId = 708;
                break;
            case 8551:
                objectDef.varBitId = 709;
                break;
            case 7848:
                objectDef.varBitId = 729;
                break;
            case 7849:
                objectDef.varBitId = 730;
                break;
            case 7850:
                objectDef.varBitId = 731;
                break;
            case 8556:
                objectDef.varBitId = 714;
                break;
            case 8557:
                objectDef.varBitId = 715;
                break;
            case 8554:
                objectDef.varBitId = 712;
                break;
            case 8555:
                objectDef.varBitId = 713;
                break;
        }

        // tree patches
        if (objectId == 8388 || objectId == 8389 || objectId == 8390 || objectId == 8391) {
            objectDef.alternativeIDS = new int[]{8395, 8394, 8393, 8392, 8395, 8395, 8395, 8395, 8462, 8463, 8464, 8465, 8466, 8467, 8468, 8481, 8482, 8483, 8484, 8485, 8486, 8487, 8488, 8489, 8435, 8436, 8437, 8438, 8439, 8440, 8441, 8442, 8443, 8444, 8445, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8396, 8397, 8398, 8399, 8400, 8401, 8402, 8403, 8404, 8405, 8406, 8407, 8408, 8409, 8410, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8473, 8474, 8475, -1, 8476, 8395, 8395, 8490, 8491, 8492, 8493, 8494, -1, 8495, 8395, 8395, 8446, 8447, 8448, 8449, 8450, 8451, 8452, -1, 8453, 8395, 8395, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, -1, 8524, 8395, 8395, 8411, 8412, 8413, 8414, 8415, 8416, 8417, 8418, 8419, 8420, 8421, -1, 8422, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8477, 8478, 8479, -1, 8480, 8395, 8395, 8496, 8497, 8498, 8499, 8500, -1, 8501, 8395, 8395, 8454, 8455, 8456, 8457, 8458, 8459, 8460, -1, 8461, 8395, 8395, 8525, 8526, 8527, 8528, 8529, 8530, 8531, 8532, 8533, -1, 8534, 8395, 8395, 8423, 8424, 8425, 8426, 8427, 8428, 8429, 8430, 8431, 8432, 8433, -1, 8434, 8314, 8395, 8488, 8488, 8488, 8488, 8488, 8488, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395, 8395};
        }

        //flower patches
        if (objectId == 7847 || objectId == 7848 || objectId == 7849 || objectId == 7850) {
            objectDef.alternativeIDS = new int[]{7843, 7842, 7841, 7840, 7843, 7843, 7843, 7843, 7867, 7868, 7869, 7870, 7871, 7899, 7900, 7901, 7902, 7903, 7883, 7884, 7885, 7886, 7887, 7919, 7920, 7921, 7922, 7923, 7851, 7852, 7853, 7854, 7855, 7918, 7917, 7916, 7915, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7872, 7873, 7874, 7875, 7843, 7904, 7905, 7906, 7907, 7843, 7888, 7889, 7890, 7891, 7843, 7924, 7925, 7926, 7927, 7843, 7856, 7857, 7858, 7859, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7876, 7877, 7878, 7843, 7843, 7908, 7909, 7910, 7843, 7843, 7892, 7893, 7894, 7843, 7843, 7928, 7929, 7930, 7843, 7843, 7860, 7861, 7862, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7879, 7880, 7881, 7882, 7843, 7911, 7912, 7913, 7914, 7843, 7895, 7896, 7897, 7898, 7843, 7931, 7932, 7933, 7934, 7843, 7863, 7864, 7865, 7866, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843, 7843};
        }

        // herb patches
        if (objectId == 8150 || objectId == 8151 || objectId == 8152 || objectId == 8153) {
            objectDef.alternativeIDS = new int[]{8135, 8134, 8133, 8132, 8139, 8140, 8141, 8142, 8143, 8143, 8143, 8139, 8140, 8141, 8142, 8143, 8143, 8143, 8139, 8140, 8141, 8142, 8143, 8143, 8143, 8139, 8140, 8141, 8142, 8143, 8143, 8143, 8139, 8140, 8141, 8142, 8143, 8143, 8143, 8139, 8140, 8141, 8142, 8143, 8143, 8143, 8139, 8140, 8141, 8142, 8143, 8143, 8143, 8139, 8140, 8141, 8142, 8143, 8143, 8143, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8139, 8140, 8141, 8142, 8143, 8143, 8143, 8139, 8140, 8141, 8142, 8143, 8143, 8143, 8139, 8140, 8141, 8142, 8143, 8143, 8143, 8139, 8140, 8141, 8142, 8143, 8143, 8143, 8139, 8140, 8141, 8142, 8143, 8143, 8143, 8139, 8140, 8141, 8142, 8143, 8143, 8143, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8144, 8145, 8146, 8144, 8145, 8146, 8144, 8145, 8146, 8144, 8145, 8146, 8144, 8145, 8146, 8144, 8145, 8146, 8144, 8145, 8146, 8144, 8145, 8146, 8144, 8145, 8146, 8144, 8145, 8146, 8144, 8145, 8146, 8144, 8145, 8146, 8144, 8145, 8146, 8144, 8145, 8146, 8147, 8148, 8149, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 9044, 9045, 9046, 9047, 9048, 9048, 9049, 9050, 9051, 9052, 9053, 9054, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, -1, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135, 8135};
        }

        // allotments
        if (objectId == 8555 || objectId == 8554 || objectId == 8557 || objectId == 8556 || objectId == 8553 || objectId == 8550 || objectId == 8551 || objectId == 8552) {
            objectDef.alternativeIDS = new int[]{8576, 8575, 8574, 8573, 8576, 8576, 8558, 8559, 8560, 8561, 8562, 8562, 8562, 8580, 8581, 8582, 8583, 8584, 8584, 8584, 8535, 8536, 8537, 8538, 8539, 8539, 8539, 8641, 8642, 8643, 8644, 8645, 8645, 8645, 8618, 8619, 8620, 8621, 8622, 8623, 8624, 8624, 8624, 8595, 8596, 8597, 8598, 8599, 8600, 8601, 8601, 8601, 8656, 8657, 8658, 8659, 8660, 8661, 8662, 8663, 8664, 8664, 8664, 8576, 8576, 8576, 8576, 8576, 8576, 8576, 8563, 8564, 8565, 8566, 8576, 8576, 8576, 8585, 8586, 8587, 8588, 8576, 8576, 8576, 8540, 8541, 8542, 8543, 8576, 8576, 8576, 8646, 8647, 8648, 8649, 8576, 8576, 8576, 8625, 8626, 8627, 8628, 8629, 8630, 8576, 8576, 8576, 8602, 8603, 8604, 8605, 8606, 8607, 8576, 8576, 8576, 8665, 8666, 8667, 8668, 8669, 8670, 8671, 8672, 8576, 8576, 8576, 8576, 8576, 8576, 8576, 8576, 8576, 8576, 8576, 8567, 8568, 8569, 8576, 8576, 8576, 8576, 8589, 8590, 8591, 8576, 8576, 8576, 8576, 8544, 8545, 8546, 8576, 8576, 8576, 8576, 8650, 8651, 8652, 8576, 8576, 8576, 8576, 8631, 8632, 8633, 8634, 8635, 8576, 8576, 8576, 8576, 8608, 8609, 8610, 8611, 8612, 8576, 8576, 8576, 8576, 8673, 8674, 8675, 8676, 8677, 8678, 8679, 8576, 8576, 8576, 8576, 8576, 8576, 8576, 8576, 8576, 8576, 8576, 8570, 8571, 8572, 8576, 8576, 8576, 8576, 8592, 8593, 8594, 8576, 8576, 8576, 8576, 8547, 8548, 8549, 8576, 8576, 8576, 8576, 8653, 8654, 8655, 8576, 8576, 8576, 8576, 8636, 8637, 8638, 8639, 8640, 8576, 8576, 8576, 8576, 8613, 8614, 8615, 8616, 8617, 8576, 8576, 8576, 8576, 8680, 8681, 8682, 8683, 8684, 8685, 8686, 8576, 8576, 8576, 8576};
        }

        if (objectId == 57225 || objectId == 26408) {
            objectDef.hasActions = 1;
        }

        if (objectId == 30624) {
            objectDef.hasActions = 1;
            objectDef.actions = new String[5];
            objectDef.actions[0] = "Craft-rune";
        }
        if (objectId == 11000) {
            objectDef.objectModelIDS[0] = 65274;
            objectDef.name = "Mysterious cape";
            objectDef.description = "Mysterious cape is hanging here.".getBytes();
            objectDef.actions = new String[5];
            objectDef.actions[0] = "Investigate";
        }

        //tzhaar floor
        if (objectId == 9373 || objectId == 9370 || objectId == 9372 || objectId == 9371 || objectId == 9395 || objectId == 37728 || objectId == 37729) {
        	objectDef.offsetH -= 3;
        }
        //Varrock tent rugs
        if (objectId == 17460 || objectId == 17459 || objectId == 17458) {
        	objectDef.offsetH -= 4;
        }
        //varrock fountain
        if (objectId == 24265) {
        	objectDef.offsetH -= 13;
        }
        //Zombies map
        if (objectId == 686 || objectId == 687 || objectId == 654) {
        	objectDef.offsetH -= 2;
        }
        //Lumby church ground glass
        if (objectId == 33740 || objectId == 33741 || objectId == 33742 || objectId == 33743) {
        	objectDef.offsetH -= 3;
        }
        //farming patches
        if (objectId == 7517) {
        	objectDef.offsetH -= 6;
        }
        //pest control boat
        if (objectId == 14256 || objectId == 14257) {
        	objectDef.offsetH -= 5;
        }

        if (objectId == 23271) {
            objectDef.hasActions = 0;
            objectDef.isUnwalkable = false;
            objectDef.actions = null;
        }
        if (objectId == 13830) {
            objectDef.objectModelIDS = null;
            objectDef.objectModelIDS = new int[]{13264};
        }
        if (!Client.buildingMode) {
            for (int i2 = 0; i2 < HOTSPOT_OBJECTS.length; i2++) {
                if (HOTSPOT_OBJECTS[i2] == objectId) {
                    objectDef.hasActions = 0;
                    objectDef.isUnwalkable = false;
                    objectDef.objectModelIDS = null;
                    objectDef.objectModelIDS = new int[]{15556};
                }
            }
            for (int i2 = 0; i2 < BUILT_OBJECTS.length; i2++)
                if (BUILT_OBJECTS[i2] == objectId) {
                    objectDef.actions[4] = null;
                }
        } else {
            for (int i2 = 0; i2 < BUILT_OBJECTS.length; i2++)
                if (BUILT_OBJECTS[i2] == objectId) {
                    objectDef.actions[4] = "Remove";
                }
        }

       /*if(objectId == 57225 || objectId == 26408) {
            objectDef.hasActions = true;
        }
        if(objectId == 51174 || objectId == 51175 || objectId == 51171 ||objectId == 51188 || objectId == 51173 || objectId == 51204
                || objectId == 51203 || objectId == 51194 || objectId == 51189 || objectId == 51167 ||
                objectId == 51164 || objectId == 51307 || objectId == 51305 || objectId == 51308 || objectId == 51306
                || objectId == 51182 || objectId == 51172) {
            objectDef.objectModelIDS = new int[] {53214, 53352, 53303, 53338};
            objectDef.renderStill = true;
        }
        if(objectId == 51185 || objectId == 51187 || objectId == 51190 || objectId == 51184 || objectId == 51192 || objectId == 51193
                || objectId == 51191 || objectId == 51158 || objectId == 51179 || objectId == 51178 ||
                objectId == 51177 || objectId == 51169 || objectId == 51168 || objectId == 51163 || objectId == 51199
                || objectId == 51301|| objectId == 51166 || objectId == 51202 || objectId == 51304
                || objectId == 51303 || objectId == 51183 || objectId == 51181 || objectId == 51241) {
            objectDef.objectModelIDS = new int[] {53214, 53333, 53244, 53332};
            objectDef.renderStill = true;
        }
        if(objectId == 52271) {
            objectDef.objectModelIDS = new int[] {53214, 53247, 53244, 53332};
            objectDef.renderStill = true;
        }
        if(objectId == 51157 || objectId == 51158 || objectId == 51159 || objectId == 51165 || objectId == 51309
                || objectId == 51160 || objectId == 52772 || objectId == 52271) {
            objectDef.objectModelIDS = new int[] {53329, 53247, 53244, 53332};
            objectDef.renderStill = true;
            objectDef.animationId = -1;
        }
        if(objectId == 51180 || objectId == 51205 || objectId == 51206) {
            objectDef.objectModelIDS = new int[] {53228, 53267, 53246, 53332};
            objectDef.renderStill = true;
        }
        //51320 55 53
        // 51322
        if(objectId == 49272) {
            objectDef.objectModelIDS = new int[] { 53336, 53298, 53347 };
            objectDef.renderStill = true;
        }
        if(objectId == 49273) {
            objectDef.objectModelIDS = new int[] { 53236, 53260, 53321 };
            objectDef.renderStill = true;
        }
        if(objectId == 51100) {
            objectDef.objectModelIDS = new int[] { 53620, 53649, 53480 };
            objectDef.renderStill = true;
        }
        if(objectId == 51101) {
            objectDef.objectModelIDS = new int[] { 53624, 53490, 53506 };
            objectDef.renderStill = true;
        }
        if(objectId == 51186) {
            objectDef.objectModelIDS = new int[] {53209, 53303};
            objectDef.renderStill = true;
        }
        if(objectId == 51610) {
            objectDef.animationId = -1;
        }
        if(objectId == 51200) {
            objectDef.objectModelIDS = new int[] {53323, 53246};
            objectDef.renderStill = true;
        }
        if(objectId == 51231 || objectId == 51232 || objectId == 51233) {
            objectDef.objectModelIDS = new int[] {53204};
            objectDef.renderStill = true;
        }
        if(objectId == 51213 || objectId == 51214) {
            objectDef.objectModelIDS = new int[] {53279, 53339};
            objectDef.renderStill = true;
        }
        if(objectId == 51600) {
            objectDef.objectModelIDS = new int[] {54953, 54955};
            objectDef.renderStill = true;
        }
        if(objectId == 51599) {
            objectDef.objectModelIDS = new int[] {54953, 54952};
            objectDef.renderStill = true;
        }
        if(objectId == 51456) {
            objectDef.objectModelIDS = new int[] {55053, 55041};
            objectDef.renderStill = true;
        }
        if(objectId == 51457 ) {
            objectDef.objectModelIDS = new int[] {55052, 55041};
            objectDef.renderStill = true;
        }
        if (objectId == 16504 || objectId == 17807 || objectId == 18465) {
            objectDef.objectModelIDS = null;
        }
        if (objectDef.renderStill) {
            objectDef.objectModelType = null;
        }*/

        //objectDef.hasActions = true;
        //objectDef.actions = new String[5];
        //objectDef.actions[3] = objectId + " " + objectDef.name + " " + (objectDef.objectModelIDS != null ? objectDef.objectModelIDS[0] : -1) + " " + objectDef.animationId;


        /*if(objectDef.objectModelIDS != null) {
            for(int i = 0; i < objectDef.objectModelIDS.length; i++) {
                try {
                    FileOutputStream fos = new FileOutputStream(new File(signlink.findcachedir() + "/models/" + objectDef.objectModelIDS[i] + ".gz"));
                    BufferedOutputStream bos = new BufferedOutputStream(fos);
                    bos.write(clientInstance.decompressors[1].decompress( objectDef.objectModelIDS[i]));
                    bos.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }*/

        if (objectDef.name != null && objectDef.name.equalsIgnoreCase("bank booth")) {
            if (objectDef.actions != null) {
                for (int index = 0; index < objectDef.actions.length; index++) {
                    if (objectDef.actions[index] != null && objectDef.actions[index].equalsIgnoreCase("collect")) {
                        objectDef.actions[index] = "Open Grand Exchange";
                    }
                }
            }
        }

        recentUse.put(objectDef, objectId);
        return objectDef; //13830 = window, 13098 = wall
    }

    static void nullLoader() {
        modelCache = null;
        modelCache2 = null;
        streamIndices = null;
        streamIndices2 = null;
        stream = null;
        stream2 = null;
    }

    static void unpackConfig(StreamLoader streamLoader) {
        stream = new Stream(streamLoader.getDataForName("loc.dat"));
        Stream stream = new Stream(streamLoader.getDataForName("loc.idx"));
        totalObjects = stream.readUnsignedWord();

        System.out.println("530 Object Amount: " + totalObjects);

        streamIndices = new int[totalObjects];
        int i = 2;
        for (int j = 0; j < totalObjects; j++) {
            streamIndices[j] = i;
            i += stream.readUnsignedWord();
        }

        stream2 = new Stream(streamLoader.getDataForName("loc667.dat"));
        Stream stream3 = new Stream(streamLoader.getDataForName("loc667.idx"));
        int total = stream3.readUnsignedWord();

        System.out.println("667 Object Amount: " + total);

        streamIndices2 = new int[total + 40000];
        i = 2;
        for (int j = 0; j < total; j++) {
            streamIndices2[j] = i;
            i += stream3.readUnsignedWord();
        }

        if (streamLoader.getDataForName("osrsloc.idx") == null) {
            System.out.println("NULL");
        }


        stream3 = new Stream(streamLoader.getDataForName("osrsloc.idx"));
        total = stream3.readUnsignedWord();
        streamOsrs = new Stream(streamLoader.getDataForName("osrsloc.dat"));
        streamOsrsIndices = new int[total];
        i = 2;
        for (int j = 0; j < total; j++) {
            streamOsrsIndices[j] = i;
            i += stream3.readUnsignedWord();
        }

        System.out.println("osrs rev 108 objects: " + total);

        /*ObjectDefinition id = forID(6733);
        System.out.println(id.variableID);
        System.out.println(id.variableIDBitfield);

        for(int a = 0; a < id.alternativeIDS.length; a++) {
            System.out.println(id.alternativeIDS[a]);
        }*/
    }

    private void setDefaults() {
        objectModelIDS = null;
        objectModelType = null;
        name = null;
        description = null;
        modifiedModelColors = null;
        originalModelColors = null;
        modifiedTextureFace = null;
        originalTextureFace = null;
        width = 1;
        height = 1;
        isUnwalkable = true;
        impenetrable = true;
        hasActions = -1;
        renderStill = false;
        adjustToTerrain = false;
        nonFlatShading = false;
        occludes = false;
        animationId = -1;
        decorDisplacement = 16;
        ambient = 0;
        contrast = 0;
        actions = null;
        mapFunctionID = -1;
        mapSceneID = -1;
        inverted = false;
        castsShadow = true;
        modelSizeX = 128;
        modelSizeH = 128;
        modelSizeY = 128;
        surroundings = 0;
        offsetX = 0;
        offsetH = 0;
        offsetY = 0;
        groundObstructive = false;
        ethereal = false;
        supportItems = -1;
        varBitId = -1;
        varpId = -1;
        alternativeIDS = null;
    }

    void requestModels(OnDemandFetcher onDemandFetcher) {
        if (objectModelIDS == null)
            return;
        for (int j = 0; j < objectModelIDS.length; j++)
            onDemandFetcher.loadExtra(objectModelIDS[j] & 0xffff, 0);
    }

    boolean isTypeCached(int i) {
        if (objectModelType == null) {
            if (objectModelIDS == null)
                return true;
            if (i != 10)
                return true;
            boolean flag1 = true;
            for (int k = 0; k < objectModelIDS.length; k++)
                flag1 &= Model.isCached(objectModelIDS[k] & 0xffff);

            return flag1;
        }
        for (int j = 0; j < objectModelType.length; j++)
            if (objectModelType[j] == i)
                return Model.isCached(objectModelIDS[j] & 0xffff);

        return true;
    }

	public Model generateModel(int i, int j, int k, int l, int i1, int j1, int currentFrame, int nextFrame, int delay, Animation sequence) {
		long uid;
		if (objectModelType == null) {
			uid = (long) (myId << 10) + j;
		} else {
			uid = (long) (i << 3) + (myId << 10) + j;
		}
		Model model = (Model) modelCache2.get(uid);
		if (model == null) {
			model = getAnimatedModel(i, true, j, true);
			if (model == null)
				return null;
			modelCache2.put(model, uid);
		}
		if (sequence == null && !adjustToTerrain) {
			return model;
		}
		if (sequence != null) {
			model = sequence.animateObjectModel(model, j, currentFrame, nextFrame, delay);
		} else {
			model = model.copy(Model.objectModel, true);
		}
		if (adjustToTerrain) {
			final int l1 = (k + l + i1 + j1) / 4;
			for (int i2 = 0; i2 < model.numberOfVerticeCoordinates; i2++) {
				final int j2 = model.verticesXCoordinate[i2];
				final int k2 = model.verticesZCoordinate[i2];
				final int l2 = k + (l - k) * (j2 + 64) / 128;
				final int i3 = j1 + (i1 - j1) * (j2 + 64) / 128;
				final int j3 = l2 + (i3 - l2) * (k2 + 64) / 128;
				model.verticesYCoordinate[i2] += j3 - l1;
			}
		}
		return model;
	}

	public Model generateModel(int i, int j, int k, int l, int i1, int j1) {
		long uid;
		if (objectModelType == null) {
			uid = (long) (myId << 10) + j;
		} else {
			uid = (long) (i << 3) + (myId << 10) + j;
		}
		Model model = (Model) modelCache2.get(uid);
		if (model == null) {
			model = getAnimatedModel(i, !nonFlatShading, j, false);
			if (model == null)
				return null;
			modelCache2.put(model, uid);
		}
		if (adjustToTerrain || nonFlatShading) {
			model = new Model(adjustToTerrain, nonFlatShading, model);
		}
		if (adjustToTerrain) {
			final int l1 = (k + l + i1 + j1) / 4;
			for (int i2 = 0; i2 < model.numberOfVerticeCoordinates; i2++) {
				final int j2 = model.verticesXCoordinate[i2];
				final int k2 = model.verticesZCoordinate[i2];
				final int l2 = k + (l - k) * (j2 + 64) / 128;
				final int i3 = j1 + (i1 - j1) * (j2 + 64) / 128;
				final int j3 = l2 + (i3 - l2) * (k2 + 64) / 128;
				model.verticesYCoordinate[i2] += j3 - l1;
			}
		}
		return model;
	}

	boolean isCached() {
		if (objectModelIDS == null)
			return true;
		boolean complete = true;
		if (myId >= 61609 && myId <= 61620) {
			return true;
		}
		for (int i = 0; i < objectModelIDS.length; i++) {
			int modelId = objectModelIDS[i] & 0xffff;
			// temp fix for rev cave
			if (modelId == 7910) {
				return true;
			}

            boolean osrs = useOsrsIndex();

            if (Client.getRegionId() == 14682) {
                osrs = false;
            }

            complete &= Model.isCached(modelId, osrs);
        }
		return complete;
	}

    ObjectDefinition method580() {
        int i = -1;
        if (varBitId != -1) {
            i = VarBit.getValue(varBitId);
        } else if (varpId != -1) {
            i = Client.playerVariables[varpId];
        }

        if (i < 0 || i >= alternativeIDS.length || alternativeIDS[i] == -1) {
            return null;
        }

        return forID(alternativeIDS[i]);
    }

	private Model getAnimatedModel(int objectType, boolean flatShading, int rotation, boolean applyLabels) {
		Model model = null;
		if (objectModelType == null) {
			if (objectType != 10)
				return null;
			if (objectModelIDS == null)
				return null;
			boolean mirror = inverted ^ rotation > 3;
			int modelAmount = objectModelIDS.length;
			int modelId;
			for (int id = 0; id < modelAmount; id++) {
				modelId = objectModelIDS[id];
				if (mirror)
					modelId += 0x10000;
				model = (Model) modelCache.get(modelId);
				if (model == null) {
					model = Model.getModel(modelId & 0xffff);
					if (model == null)
						return null;
					if (mirror)
						model.mirrorModel();
					modelCache.put(model, modelId);
				}
				if (modelAmount > 1)
					modelParts[id] = model;
			}

			if (modelAmount > 1)
				model = new Model(modelParts, modelAmount);
		} else {
			int typeIndex = -1;
			for (int id = 0; id < objectModelType.length; id++) {
				if (objectModelType[id] == objectType) {
					typeIndex = id;
					break;
				}
			}
			if (typeIndex == -1)
				return null;
			boolean mirror = inverted ^ (rotation > 3);
			int modelId = objectModelIDS[typeIndex];
			if (mirror)
				modelId += 0x10000;
			model = (Model) modelCache.get(modelId);
			if (model == null) {
				model = Model.getModel(modelId & 0xffff);
				if (model == null)
					return null;
				if (mirror)
					model.mirrorModel();
				modelCache.put(model, modelId);
			}
		}
		boolean needsScaling = modelSizeX != 128 || modelSizeH != 128 || modelSizeY != 128;
		boolean modelIsOffset = offsetX != 0 || offsetH != 0 || offsetY != 0;
		Model model_3 = new Model(model, rotation == 0 && !needsScaling && !modelIsOffset, modifiedModelColors == null, true);
		rotation &= 0x3;
		if (rotation == 1) {
			model_3.rotateBy90();
		} else if (rotation == 2) {
			model_3.rotateBy180();
		} else if (rotation == 3) {
			model_3.rotateBy270();
		}
		if (modifiedModelColors != null) {
			for (int id = 0; id < modifiedModelColors.length; id++) {
				model_3.setColor(modifiedModelColors[id], originalModelColors[id]);
			}
		}
		if (modifiedTextureFace != null) {
			for (int id = 0; id < modifiedTextureFace.length; id++) {
				model_3.setTexture(modifiedTextureFace[id], originalTextureFace[id]);
			}
		}
		if (needsScaling) {
			model_3.scale(modelSizeX, modelSizeH, modelSizeY);
		}
		if (modelIsOffset) {
			model_3.translate(offsetX, offsetH, offsetY);
		}
		if (applyLabels) {
			model_3.createBones();
		}
		model_3.setLighting(ambient + 64, contrast * 5 + 850, -30, -50, -30, flatShading);
		return model_3;
	}

	private void readValues(Stream stream, int id, boolean latest) {
		for (;;) {
			int j = stream.readUnsignedByte();
			if (j == 0) {
				break;
			}
			if (j == 1) {
				int k = stream.readUnsignedByte();
				if (k > 0)
					if (objectModelIDS == null || lowMem) {
						objectModelType = new int[k];
						objectModelIDS = new int[k];
						for (int k1 = 0; k1 < k; k1++) {
							objectModelIDS[k1] = stream.readUnsignedWord();
							objectModelType[k1] = stream.readUnsignedByte();
						}

					} else {
						stream.currentOffset += k * 3;
					}
			} else if (j == 2)
				name = stream.readString();
			else if (j == 3)
				description = stream.readBytes();
			else if (j == 5) {
				int l = stream.readUnsignedByte();
				if (l > 0)
					if (objectModelIDS == null || lowMem) {
						objectModelType = null;
						objectModelIDS = new int[l];
						for (int l1 = 0; l1 < l; l1++)
							objectModelIDS[l1] = stream.readUnsignedWord();

					} else {
						if (!latest) {
							stream.currentOffset += l * 2;
						}
					}
			} else if (j == 14)
				width = stream.readUnsignedByte();
			else if (j == 15)
				height = stream.readUnsignedByte();
			else if (j == 17)
				isUnwalkable = false;
			else if (j == 18)
				impenetrable = false;
			else if (j == 19) {
				hasActions = stream.readUnsignedByte();
			} else if (j == 21)
				adjustToTerrain = true;
			else if (j == 22)
				nonFlatShading = true;
			else if (j == 23)
				occludes = true;
			else if (j == 24) {
				animationId = stream.readUnsignedWord();
				if (animationId == 65535)
					animationId = -1;
			} else if (j == 28)
				decorDisplacement = stream.readUnsignedByte();
			else if (j == 29)
				ambient = stream.readSignedByte();
			else if (j == 39)
				contrast = stream.readSignedByte();
			else if (j >= 30 && j < 39) {
				if (actions == null)
					actions = new String[5];
				actions[j - 30] = stream.readString();
				if (actions[j - 30].equalsIgnoreCase("hidden"))
					actions[j - 30] = null;
			} else if (j == 40) {
				int i1 = stream.readUnsignedByte();
				modifiedModelColors = new short[i1];
				originalModelColors = new short[i1];
				for (int i2 = 0; i2 < i1; i2++) {
					modifiedModelColors[i2] = (short) stream.readUnsignedWord();
					originalModelColors[i2] = (short) stream.readUnsignedWord();
				}

			} else if (j == 60)
				mapFunctionID = stream.readUnsignedWord();
			else if (j == 62)
				inverted = true;
			else if (j == 64)
				castsShadow = false;
			else if (j == 65)
				modelSizeX = stream.readUnsignedWord();
			else if (j == 66)
				modelSizeH = stream.readUnsignedWord();
			else if (j == 67)
				modelSizeY = stream.readUnsignedWord();
			else if (j == 68)
				mapSceneID = stream.readUnsignedWord();
			else if (j == 69)
				surroundings = stream.readUnsignedByte();
			else if (j == 70)
				offsetX = stream.readSignedWord();
			else if (j == 71) {
				offsetH = stream.readSignedWord();
			} else if (j == 72)
				offsetY = stream.readSignedWord();
			else if (j == 73)
				groundObstructive = true;
			else if (j == 74) {
				ethereal = true;
			} else if (j == 75) {
				supportItems = stream.readUnsignedByte();
			} else if (j == 77) {
				varBitId = stream.readUnsignedWord();
				if (varBitId == 65535)
					varBitId = -1;
				varpId = stream.readUnsignedWord();
				if (varpId == 65535)
					varpId = -1;
				int j1 = stream.readUnsignedByte();
				alternativeIDS = new int[j1 + 1];
				for (int j2 = 0; j2 <= j1; j2++) {
					alternativeIDS[j2] = stream.readUnsignedWord();
					if (alternativeIDS[j2] == 65535)
						alternativeIDS[j2] = -1;
				}
			} else if (j == 80) {
				int len = stream.readUnsignedByte();
				modifiedTextureFace = new short[len];
				originalTextureFace = new short[len];
				for (int i2 = 0; i2 < len; i2++) {
					modifiedTextureFace[i2] = (short) stream.readUnsignedWord();
					originalTextureFace[i2] = (short) stream.readUnsignedWord();
				}
			}
		}
	}

    public void readOsrsValues(Stream stream) {
        for (;;) {
            int type = stream.readUnsignedByte();
            if (type == 0) {
                break;
            }
            if (type == 1) {
                int len = stream.readUnsignedByte();
                if (len > 0) {
                    if (objectModelIDS == null || lowMem) {
                        objectModelType = new int[len];
                        objectModelIDS = new int[len];
                        for (int k1 = 0; k1 < len; k1++) {
                            objectModelIDS[k1] = stream.readUnsignedWord();
                            objectModelType[k1] = stream.readUnsignedByte();
                        }
                    } else {
                        stream.currentOffset += len * 3;
                    }
                }
            } else if (type == 2)
                name = stream.readString();
            else if (type == 3)
                description = stream.readBytes();
            else if (type == 5) {
                int len = stream.readUnsignedByte();
                if (len > 0) {
                    if (objectModelIDS == null || lowMem) {
                        objectModelType = null;
                        objectModelIDS = new int[len];
                        for (int l1 = 0; l1 < len; l1++)
                            objectModelIDS[l1] = stream.readUnsignedWord();
                    } else {
                        stream.currentOffset += len * 2;
                    }
                }
            } else if (type == 14)
                width = stream.readUnsignedByte();
            else if (type == 15)
                height = stream.readUnsignedByte();
            else if (type == 17)
                isUnwalkable = false;
            else if (type == 18)
                impenetrable = false;
            else if (type == 19)
            	hasActions = stream.readUnsignedByte();
            else if (type == 21)
                adjustToTerrain = true;
            else if (type == 22)
                nonFlatShading = true;
            else if (type == 23)
                occludes = true;
            else if (type == 24) {
                animationId = stream.readUnsignedWord();
                if (animationId == 65535)
                    animationId = -1;
            } else if (type == 28)
                decorDisplacement = stream.readUnsignedByte();
            else if (type == 29)
                ambient = stream.readSignedByte();
            else if (type == 39)
                contrast = stream.readSignedByte();
            else if (type >= 30 && type < 39) {
                if (actions == null)
                    actions = new String[5];
                actions[type - 30] = stream.readString();
                if (actions[type - 30].equalsIgnoreCase("hidden"))
                    actions[type - 30] = null;
            } else if (type == 40) {
                int i1 = stream.readUnsignedByte();
                modifiedModelColors = new short[i1];
                originalModelColors = new short[i1];
                for (int i2 = 0; i2 < i1; i2++) {
                    modifiedModelColors[i2] = (short) stream.readUnsignedWord();
                    originalModelColors[i2] = (short) stream.readUnsignedWord();
                }

            } else if (type == 60)
                mapFunctionID = stream.readUnsignedWord();
            else if (type == 62)
                inverted = true;
            else if (type == 64)
                castsShadow = false;
            else if (type == 65)
                modelSizeX = stream.readUnsignedWord();
            else if (type == 66)
                modelSizeH = stream.readUnsignedWord();
            else if (type == 67)
                modelSizeY = stream.readUnsignedWord();
            else if (type == 68)
                mapSceneID = stream.readUnsignedWord();
            else if (type == 69)
                surroundings = stream.readUnsignedByte();
            else if (type == 70)
                offsetX = stream.readSignedWord();
            else if (type == 71)
                offsetH = stream.readSignedWord();
            else if (type == 72)
                offsetY = stream.readSignedWord();
            else if (type == 73)
                groundObstructive = true;
            else if (type == 74)
                ethereal = true;
            else if (type == 75) {
                supportItems = stream.readUnsignedByte();
            } else if (type == 77) {
                varBitId = stream.readUnsignedWord();
                if (varBitId == 65535)
                    varBitId = -1;
                varpId = stream.readUnsignedWord();
                if (varpId == 65535)
                    varpId = -1;
                int j1 = stream.readUnsignedByte();
                alternativeIDS = new int[j1 + 1];
                for (int j2 = 0; j2 <= j1; j2++) {
                    alternativeIDS[j2] = stream.readUnsignedWord();
                    if (alternativeIDS[j2] == 65535)
                        alternativeIDS[j2] = -1;
                }
            }
        }
    }

    private void postDecode() {
		if (hasActions == -1) {
			hasActions = 0;
			if (name != null && !name.equalsIgnoreCase("null")) {
				if (objectModelIDS != null && (objectModelType == null || objectModelType[0] == 10)) {
					hasActions = 1;
				}
				if (actions != null) {
					hasActions = 1;
				}
			}
		}
        if (ethereal) {
            isUnwalkable = false;
            impenetrable = false;
        }
        if (supportItems == -1) {
            supportItems = isUnwalkable ? 1 : 0;
        }
    }

}
